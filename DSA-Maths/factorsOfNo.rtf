{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 /*\
Finding Factors of a number without repeatation\
*/
\f1\b0 \
\
import java.util.Arrays;\
import java.util.ArrayList;\
public class Main\
\{\
	public static void main(String[] args) \{\
	    int n = 20;\
	    factors1(n);\
	\}\
	\
	//Time Complexity: O(SQRT(N))\
	static void factors(int n) \{\
	    for( int i = 1; i <= Math.sqrt(n); i++) \{\
	        if( n % i == 0) \{\
	            if( n / i == i) \{\
	                System.out.print(i + " ");\
	            \}else \{\
	                System.out.print(i + " " + n/i + " ");\
	            \}\
	        \}\
	    \}\
	\}\
	\
	//To print factors in ascending order\
	static void factors1(int n) \{\
	    ArrayList<Integer> list = new ArrayList<>();\
	    for( int i = 1; i <= Math.sqrt(n); i++) \{\
	        if( n % i == 0) \{\
	            if( n / i == i) \{\
	                System.out.print(i + " ");\
	            \}else \{\
	                System.out.print(i + " ");\
	                list.add(n/i);\
	            \}\
	        \}\
	    \}\
	    \
	    for( int i = list.size() - 1; i >= 0; i--) \{\
	        System.out.print(list.get(i) + " ");\
	    \}\
	\}\
\}}