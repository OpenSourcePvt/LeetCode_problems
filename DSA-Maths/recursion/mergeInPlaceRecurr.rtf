{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 /*\
mergeInPlace sort using recursion\
*/
\f1\b0 \
import java.util.Arrays;\
public class Main\
\{\
	public static void main(String[] args) \{\
	    int[] arr = \{4,7,3,6,24,5,6,4,6\};\
	    mergeSortInPlace(arr, 0, arr.length);\
	    System.out.println(Arrays.toString(arr));\
	\}\
	\
	static void mergeSortInPlace(int[] arr, int s, int e) \{\
	    if( (e - s) == 1) \{\
	        return;\
	    \}\
	    \
	    int m = (s + e) / 2;\
	    mergeSortInPlace(arr, s, m);\
	    mergeSortInPlace(arr, m, e);\
	    mergeInPlace(arr, s, e, m);\
	\}\
	\
	static void mergeInPlace(int[] arr, int s, int e, int m) \{\
	    int[] mix = new int[e - s];\
	    \
	    int i = s;\
	    int j = m;\
	    int k = 0;\
	    \
	    while( i < m && j < e) \{\
	        if( arr[i] <= arr[j]) \{\
	            mix[k] = arr[i];\
	            i++;\
	        \}else \{\
	            mix[k] = arr[j];\
	            j++;\
	        \}\
	        k++;\
	    \}\
	    \
	    while(i < m) \{\
	        mix[k] = arr[i];\
	        i++;\
	        k++;\
	    \}\
	    \
	    while( j < e) \{\
	        mix[k] = arr[j];\
	        j++;\
	        k++;\
	    \}\
	    \
	    //Modify original array \
	    for( int l = 0; l < mix.length; l++) \{\
	        arr[s+l] = mix[l];\
	    \}\
	    \
	    //optimized\
	   // System.arraycopy(mix, 0, arr, s + 0, mix.length);\
	\}\
\}\
}