{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 /*\
Recursion Subset, Subsequence, String Questions\
*/
\f1\b0 \
import java.util.Arrays;\
import java.util.ArrayList;\
import java.util.List;\
public class Main\
\{\
	public static void main(String[] args) \{\
	   // skip("","vaibhav");\
	   // System.out.println(skipRecursion("vaibhav"));\
	   // System.out.println(skipSubstring("largeAppledata"));\
	   //subSeq("","abc");\
	   //System.out.println(subSeqArray("","abc"));\
	   //subSeqAscii("","abc");\
	   //System.out.println(subSeqAsciiArray("","abc"));\
	   \
	   //int[] arr = \{1,2,3\};\
	   //List<List<Integer>> ans = intSubSet(arr);\
	   //for( List<Integer> list: ans) \{\
	   //     System.out.println(list);\
	   //\}\
	   \
	   //int[] arr = \{2,1,2\};\
	   //List<List<Integer>> ans = intSubSetDuplicate(arr);\
	   //for( List<Integer> list: ans) \{\
	   //     System.out.println(list);\
	   //\}\
	\}\
	\
	static void skip(String processed, String unprocessed) \{\
	    if( unprocessed.isEmpty()) \{\
	        System.out.println(processed);\
	        return;\
	    \}\
	    \
	    char ch = unprocessed.charAt(0);\
	    \
	    if( ch == 'a') \{\
	        skip(processed, unprocessed.substring(1));\
	    \}else \{\
	        skip(processed + ch, unprocessed.substring(1));\
	    \}\
	\}\
	\
	static String skipRecursion(String unprocessed) \{\
	    if( unprocessed.isEmpty()) \{\
	        return "";\
	    \}\
	    \
	    char ch = unprocessed.charAt(0);\
	    \
	    if( ch == 'a') \{\
	        return skipRecursion(unprocessed.substring(1));\
	    \}else \{\
	        return ch + skipRecursion(unprocessed.substring(1));\
	    \}\
	\}\
	\
	static String skipSubstring(String unprocessed) \{\
	    if( unprocessed.isEmpty()) \{\
	        return "";\
	    \}\
	    \
	    //check the substring starting from \
	    \
	    \
	    if( unprocessed.startsWith("Apple")) \{\
	        return skipSubstring(unprocessed.substring(5));\
	    \}else \{\
	        return unprocessed.charAt(0) + skipSubstring(unprocessed.substring(1));\
	    \}\
	\}\
	\
	static void subSeq(String processed, String unProcessed) \{\
	    if( unProcessed.isEmpty()) \{\
	        System.out.println(processed);\
	        return;\
	    \}\
	    \
	    char ch = unProcessed.charAt(0);\
	    \
	    subSeq(processed + ch, unProcessed.substring(1));\
	    subSeq(processed, unProcessed.substring(1));\
	\}\
	\
	static ArrayList<String> subSeqArray(String processed, String unProcessed) \{\
	    if( unProcessed.isEmpty()) \{\
	        ArrayList<String> list = new ArrayList<>();\
	        list.add(processed);\
	        return list;\
	    \}\
	    \
	    char ch = unProcessed.charAt(0);\
	    \
	    ArrayList<String> left = subSeqArray(processed + ch, unProcessed.substring(1));\
	    ArrayList<String> right = subSeqArray(processed, unProcessed.substring(1));\
	    \
	    left.addAll(right);\
	    return left;\
	\}\
	\
	static void subSeqAscii(String processed, String unProcessed) \{\
	    if( unProcessed.isEmpty()) \{\
	        System.out.println(processed);\
	        return;\
	    \}\
	    \
	    char ch = unProcessed.charAt(0);\
	    \
	    subSeqAscii(processed + ch, unProcessed.substring(1));\
	    subSeqAscii(processed, unProcessed.substring(1));\
	    subSeqAscii(processed + (ch + 0), unProcessed.substring(1));\
	\}\
	\
	static ArrayList<String> subSeqAsciiArray(String processed, String unProcessed) \{\
	    if( unProcessed.isEmpty()) \{\
	        ArrayList<String> list = new ArrayList<>();\
	        list.add(processed);\
	        return list;\
	    \}\
	    \
	    char ch = unProcessed.charAt(0);\
	    \
	    ArrayList<String> first = subSeqAsciiArray(processed + ch, unProcessed.substring(1));\
	    ArrayList<String> second = subSeqAsciiArray(processed, unProcessed.substring(1));\
	    ArrayList<String> third = subSeqAsciiArray(processed + (ch + 0), unProcessed.substring(1));\
	    first.addAll(second);\
	    first.addAll(third);\
	    return first;\
	\}\
	\
	//subset by using iteration\
	static List<List<Integer>> intSubSet(int[] arr) \{\
        List<List<Integer>> outerList = new ArrayList<>();\
        outerList.add(new ArrayList<>());\
        \
        for(int num : arr) \{\
            int n = outerList.size();\
            for( int i = 0; i < n; i++) \{\
                List<Integer> internal = new ArrayList<>(outerList.get(i) );\
                internal.add(num);\
                outerList.add(internal);\
            \}\
        \}\
        \
        return outerList;\
	\}\
	\
	static List<List<Integer>> intSubSetDuplicate(int[] arr) \{\
	    Arrays.sort(arr);\
        List<List<Integer>> outerList = new ArrayList<>();\
        outerList.add(new ArrayList<>());\
        int start = 0;\
        int end = 0;\
        for(int i = 0; i < arr.length; i++) \{\
            start = 0;\
            //if current and previous element is equal s = e + 1\
            if( i > 0 && arr[i] == arr[i-1]) \{\
                start = end + 1;\
            \}\
            end = outerList.size() - 1;\
            int n = outerList.size();\
            for( int j = start; j < n; j++) \{\
                List<Integer> internal = new ArrayList<>(outerList.get(j) );\
                internal.add(arr[i]);\
                outerList.add(internal);\
            \}\
        \}\
        \
        return outerList;\
	\}\
\}\
}