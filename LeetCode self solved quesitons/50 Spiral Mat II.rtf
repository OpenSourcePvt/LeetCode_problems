{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 /*\
59. Spiral Matrix II\
Medium\
Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.\
\
Example 1:\
\
Input: n = 3\
Output: [[1,2,3],[8,9,4],[7,6,5]]\
Example 2:\
\
Input: n = 1\
Output: [[1]]\
 \
Constraints:\
\
1 <= n <= 20\
*/
\f1\b0 \
import java.util.Arrays;\
public class Main\
\{\
	public static void main(String[] args) \{\
		int n = 1;\
		for(int[] row: generateMatrix(n)) \{\
		    System.out.println(Arrays.toString(row));\
		\}\
	\}\
	\
	public static int[][] generateMatrix(int n) \{\
        int count = 0;\
        int[][] result = new int[n][n];\
        int row = 0;\
        int col = result[0].length - 1;\
        if( n == 1) \{\
            result[0][0] = 1;\
            return result;\
        \}\
        while( count < (n * n)) \{\
            //for right direciton\
            if ( count < (n * n)) \{\
            for( int j = row; j < result[row].length - row; j++) \{\
                result[row][j] = ++count;\
            \}\
            \}\
            //for down direction\
            if ( count < (n * n)) \{\
            row++;\
            for( int j = row; j <= result.length - row; j++) \{\
                result[j][col] = ++count;\
            \}\
            \}\
            \
            //for left direction\
            if ( count < (n * n)) \{\
                col--;\
            for( int j = col; j >= row - 1 ; j--) \{\
                result[result.length - row][j] = ++count;\
            \}\
            \}\
            \
            //for upword direction\
            if ( count < (n * n)) \{\
            for( int j = result.length - 1 - row; j >= row; j--) \{\
                    result[j][row - 1] = ++count;\
            \}\
            \}\
        \}\
        return result;\
    \}\
\}\
}