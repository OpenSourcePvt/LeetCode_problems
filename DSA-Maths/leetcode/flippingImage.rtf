{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 /*\
832. Flipping an Image\
Asked in google Interview\
Easy\
Given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.\
\
To flip an image horizontally means that each row of the image is reversed.\
\
For example, flipping [1,1,0] horizontally results in [0,1,1].\
To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0.\
\
For example, inverting [0,1,1] results in [1,0,0].\
 \
\
Example 1:\
\
Input: image = [[1,1,0],[1,0,1],[0,0,0]]\
Output: [[1,0,0],[0,1,0],[1,1,1]]\
Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\
Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]\
Example 2:\
\
Input: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\
Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\
Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\
Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\
 \
\
Constraints:\
\
n == image.length\
n == image[i].length\
1 <= n <= 20\
images[i][j] is either 0 or 1\
*/\
\
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Flipping an Image.\
// Memory Usage: 45.3 MB, less than 7.53% of Java online submissions for Flipping an Image.\
// 02/13/2022 21:33	Accepted	0 ms	45.3 MB	java
\f1\b0 \
\
import java.util.Arrays;\
public class Main\
\{\
	public static void main(String[] args) \{\
	    int[][] image = \{\
	        \{1,1,0\},\
	        \{1,0,1\},\
	        \{0,0,0\}\
	    \};\
	  System.out.println(Arrays.toString(image));\
	\}\
	\
	public int[][] flipAndInvertImage(int[][] image) \{\
	    for( int[] row : image) \{\
	       for( int i = 0; i <= (row.length - 1) / 2; i++) \{ // for( int i = 0; i < (row.length + 1) / 2; i++)\
                int temp = row[i] ^ 1;  //Any no ^ 1 = invert(any number) i.e 0 ^ 1 = 1 and 1 ^ 1 = 0\
                row[i] = row[row.length - 1 - i] ^ 1;\
                row[row.length - 1 - i] = temp;\
            \} \
	    \}\
	    return image;\
    \}\
\}\
}