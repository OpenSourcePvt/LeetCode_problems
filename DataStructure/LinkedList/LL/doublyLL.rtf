{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Arial-BoldMT;\f1\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 //doubly linked list
\f1\b0 \
public class DL \{\
    \
    Node head;\
    Node tail = null;\
    private int size;\
    \
    public void insertFirst(int val) \{\
        Node node = new Node(val);\
        node.next = head;\
        node.prev = null;\
        if( head != null) \{\
            head.prev = node;\
        \}\
        head = node;\
        size += 1;\
    \}\
    \
    public void insertLast(int val) \{\
        Node node = new Node(val);\
        traverseLast();\
        node.prev = tail;\
        tail.next = node;\
        tail = node;\
        tail.next = null;\
        size += 1;\
    \}\
    \
    public void insertAtIndex(int val, int index) \{\
        Node node = new Node(val);\
        if( head == null) \{\
            insertFirst(val);\
        \}\
        if( index > size - 1) \{\
            System.out.println("index out of bound cannot insert");\
            return;\
        \}\
        if( index == size - 1) \{\
            insertLast(val);\
            return;\
        \}\
        Node temp = head;\
        int count = 0;\
        while( count != index) \{\
            temp = temp.next;\
            count += 1;\
        \}\
        Node temp2 = temp.next;\
        temp.next = node;\
        temp2.prev = node;\
        node.prev = temp;\
        node.next = temp2;\
        size += 1;\
    \}\
    \
    public void display() \{\
        Node node = head;\
        while(node != null) \{\
            System.out.print(node.val + " -> ");\
            node = node.next;\
        \}\
        System.out.println("END");\
    \}\
    \
    public void displayRev() \{\
        traverseLast();\
        while( tail != null) \{\
            System.out.print(tail.val + " -> ");\
            tail = tail.prev;\
        \}\
        System.out.println("START");\
    \}\
 \
    public void traverseLast() \{\
        Node node = head;\
        while(node != null) \{\
            tail = node;\
            node = node.next;\
        \}\
    \}   \
    private class Node \{\
        int val;\
        Node next;\
        Node prev;\
        \
        Node(int val) \{\
            this.val = val;\
        \}\
        \
        Node(int val, Node next, Node prev) \{\
            this.val = val;\
            this.next = next;\
            this.prev = prev;\
        \}\
    \}\
\}}