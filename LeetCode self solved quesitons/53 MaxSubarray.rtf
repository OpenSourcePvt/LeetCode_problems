{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 /*\
53. Maximum Subarray\
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\
\
A subarray is a contiguous part of an array.\
\
Example 1:\
\
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\
Output: 6\
Explanation: [4,-1,2,1] has the largest sum = 6.\
Example 2:\
\
Input: nums = [1]\
Output: 1\
Example 3:\
\
Input: nums = [5,4,-1,7,8]\
Output: 23\
*/\

\f1\b0 public class Main\
\{\
	public static void main(String[] args) \{\
	    int[] nums = \{-2,1,-3,4,-1,2,1,-5,4\};\
	    System.out.println(maxSubArray(nums));\
	\}\
	\
	public static int maxSubArray(int[] nums) \{\
        \
        int max = Integer.MIN_VALUE;\
        int current = 0;\
        for( int i = 0; i < nums.length; i++) \{\
            current += nums[i];\
            if( max < current) max = current;\
            if( current < 0) current = 0;\
        \}\
        return max;\
    \}\
\}\
}