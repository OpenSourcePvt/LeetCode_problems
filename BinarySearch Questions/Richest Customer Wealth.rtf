{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww17360\viewh14860\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
// 1672. Richest Customer Wealth\
/*\
You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i\uc0\u8203 \u8203 \u8203 \u8203 \u8203 \u8203 \u8203 \u8203 \u8203 \u8203 \u8203 th\u8203 \u8203 \u8203 \u8203  customer has in the j\u8203 \u8203 \u8203 \u8203 \u8203 \u8203 \u8203 \u8203 \u8203 \u8203 \u8203 th\u8203 \u8203 \u8203 \u8203  bank. Return the wealth that the richest customer has.\
\
A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.\
\
 \
\
Example 1:\
\
Input: accounts = [[1,2,3],[3,2,1]]\
Output: 6\
Explanation:\
1st customer has wealth = 1 + 2 + 3 = 6\
2nd customer has wealth = 3 + 2 + 1 = 6\
Both customers are considered the richest with a wealth of 6 each, so return 6.\
Example 2:\
\
Input: accounts = [[1,5],[7,3],[3,5]]\
Output: 10\
Explanation: \
1st customer has wealth = 6\
2nd customer has wealth = 10 \
3rd customer has wealth = 8\
The 2nd customer is the richest with a wealth of 10.\
Example 3:\
\
Input: accounts = [[2,8,7],[7,1,3],[1,9,5]]\
Output: 17\
 \
\
Constraints:\
\
m == accounts.length\
n == accounts[i].length\
1 <= m, n <= 50\
1 <= accounts[i][j] <= 100\
*/\
// 02/03/2022 13:08	Accepted	1 ms	43.7 MB	java\
public class MyClass \{\
    public static void main(String args[]) \{\
        int[][] accounts = \{\{1,5\},\{7,3\},\{3,5\}\};\
     System.out.println(richestPerson(accounts));\
    \}\
    // static int richestPerson(int[][] accounts)\{\
    //     int max = 0;\
    //     for (int person = 0; person < accounts.length; person++)\{\
    //         //at each iteration calculate new sum\
    //         int sum  = 0;\
    //         for(int account = 0; account< accounts[person].length; account++)\{\
    //             sum += accounts[person][account];\
    //         \}\
    //         if (max < sum)\{\
    //             max = sum;\
    //         \}\
    //     \}\
    //     return max;\
    // \}\
    \
    //optimized code\
    static int richestPerson(int[][] accounts)\{\
        int max = 0;\
        for (int[] person: accounts)\{\
            //at each iteration calculate new sum\
            int sum  = 0;\
            for(int account: person)\{\
                sum += account;\
            \}\
            if (max < sum)\{\
                max = sum;\
            \}\
        \}\
        return max;\
    \}\
\}}