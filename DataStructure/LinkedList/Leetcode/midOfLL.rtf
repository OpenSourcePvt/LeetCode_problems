{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 /*\
https://leetcode.com/problems/middle-of-the-linked-list/\
876. Middle of the Linked List\
Easy\
Given the head of a singly linked list, return the middle node of the linked list.\
\
If there are two middle nodes, return the second middle node.\
\
Example 1:\
\
Input: head = [1,2,3,4,5]\
Output: [3,4,5]\
Explanation: The middle node of the list is node 3.\
Example 2:\
\
Input: head = [1,2,3,4,5,6]\
Output: [4,5,6]\
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.\
*/
\f1\b0 \
public class Main\
\{\
	public static void main(String[] args) \{\
		\
		\
	\}\
    public ListNode middleNode(ListNode head) \{\
        ListNode s = head;\
        ListNode f = head;\
        \
        while( f != null && f.next != null) \{\
            s = s.next;\
            f = f.next.next;\
        \}\
        return s;\
    \}\
    \
\}}