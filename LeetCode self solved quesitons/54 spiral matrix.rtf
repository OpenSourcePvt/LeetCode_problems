{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 /*\
54. Spiral Matrix\
Medium\
Given an m x n matrix, return all elements of the matrix in spiral order.\
\
Example 1:\
\
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\
Output: [1,2,3,6,9,8,7,4,5]\
Example 2:\
\
Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\
Output: [1,2,3,4,8,12,11,10,9,5,6,7]\
 \
Constraints:\
\
m == matrix.length\
n == matrix[i].length\
1 <= m, n <= 10\
-100 <= matrix[i][j] <= 100\
*/
\f1\b0 \
import java.util.ArrayList;\
import java.util.Arrays;\
import java.util.List;\
public class Main\
\{\
	public static void main(String[] args) \{\
		int[][] matrix = \{\
		    \{1,2,3,4\},\
		    \{5,6,7,8\},\
		    \{9,10,11,12\}\
		\};\
		\
		System.out.println(spiralOrder(matrix));\
	\}\
	\
	public static List<Integer> spiralOrder(int[][] matrix) \{\
        boolean[][] isVisited = new boolean[matrix.length][matrix[0].length];\
        boolean remainingVisited = false;\
        ArrayList<Integer> result = new ArrayList<Integer>();\
        int row = 0;\
        int col = matrix[0].length - 1;\
        if( matrix.length == 1 && matrix[0].length == 1) \{\
            result.add(matrix[0][0]);\
            return result;\
        \}\
        while( true) \{\
            int lastVisitedRow = 0;\
            int lastVisitedCol = 0;\
            //for right direciton\
            for( int j = row; j < matrix[row].length; j++) \{\
                if(!isVisited[row][j]) \{\
                    result.add(matrix[row][j]);\
                    isVisited[row][j] = true;\
                \}\
            \}\
            \
            //for down direction\
            for( int j = row + 1; j < matrix.length - row; j++) \{\
                if(!isVisited[j][col]) \{\
                    result.add(matrix[j][col]);\
                    isVisited[j][col] = true;\
                \}\
            \}\
            \
            //for left direction\
            for( int j = col - 1; j >= row ; j--) \{\
                if(!isVisited[matrix.length - 1 - row][j]) \{\
                    result.add(matrix[matrix.length - 1 - row][j]);\
                    isVisited[matrix.length - 1 - row][j] = true;\
                \}\
            \}\
            \
            //for upword direction\
            for( int j = matrix.length - 1 - row; j > row; j--) \{\
                if(!isVisited[j][row]) \{\
                    result.add(matrix[j][row]);\
                    isVisited[j][row] = true;\
                    lastVisitedRow = j;\
                    lastVisitedCol = row + 1;\
                \}\
            \}\
            \
            if( !isVisited[lastVisitedRow][lastVisitedCol]) \{\
                row++;\
                col--;\
            \}else \{\
                break;\
            \}\
        \}\
        return result;\
    \}\
\}\
}