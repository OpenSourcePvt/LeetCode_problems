{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fnil\fcharset0 HelveticaNeue-Medium;
\f3\fnil\fcharset0 HelveticaNeue;\f4\fmodern\fcharset0 Courier;\f5\fnil\fcharset0 Menlo-Bold;
\f6\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;\red232\green86\blue7;\red67\green91\blue103;
\red29\green38\blue42;\red245\green247\blue249;}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;\cssrgb\c93725\c42353\c0;\cssrgb\c32941\c43137\c47843;
\cssrgb\c14902\c19608\c21961;\cssrgb\c96863\c97647\c98039;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
\pard\pardeftab720\partightenfactor0

\f1\b\fs32 \cf2 \expnd0\expndtw0\kerning0
189. Rotate Array\

\f2\b0\fs26 \cf3 Medium
\f3\fs24 \cf4 \

\fs28 \cf5 Given an array, rotate the array to the right by 
\f4\fs26 \cf4 \cb6 k
\f3\fs28 \cf5 \cb1  steps, where 
\f4\fs26 \cf4 \cb6 k
\f3\fs28 \cf5 \cb1  is non-negative.\
\'a0\

\f1\b Example 1:
\f3\b0 \

\f5\b\fs26 \cb6 Input:
\f6\b0  nums = [1,2,3,4,5,6,7], k = 3\

\f5\b Output:
\f6\b0  [5,6,7,1,2,3,4]\

\f5\b Explanation:
\f6\b0 \
rotate 1 steps to the right: [7,1,2,3,4,5,6]\
rotate 2 steps to the right: [6,7,1,2,3,4,5]\
rotate 3 steps to the right: [5,6,7,1,2,3,4]\

\f1\b\fs28 \cb1 Example 2:
\f3\b0 \

\f5\b\fs26 \cb6 Input:
\f6\b0  nums = [-1,-100,3,99], k = 2\

\f5\b Output:
\f6\b0  [3,99,-1,-100]\

\f5\b Explanation:
\f6\b0  \
rotate 1 steps to the right: [99,-1,-100,3]\
rotate 2 steps to the right: [3,99,-1,-100]\

\f3\fs28 \cb1 \'a0\

\f1\b Constraints:
\f3\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f4\fs26 \cf4 \cb6 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
1 <= nums.length <= 10
\fs19\fsmilli9750 5
\f3\fs28 \cf5 \cb1 \
\ls1\ilvl0
\f4\fs26 \cf4 \cb6 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
-2
\fs19\fsmilli9750 31
\fs26  <= nums[i] <= 2
\fs19\fsmilli9750 31
\fs26  - 1
\f3\fs28 \cf5 \cb1 \
\ls1\ilvl0
\f4\fs26 \cf4 \cb6 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
0 <= k <= 10
\fs19\fsmilli9750 5
\f3\fs28 \cf5 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \'a0\

\f1\b Follow up:
\f3\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Try to come up with as many solutions as you can. There are at least 
\f1\b three
\f3\b0  different ways to solve this problem.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Could you do it in-place with 
\f4\fs26 \cf4 \cb6 O(1)
\f3\fs28 \cf5 \cb1  extra space?
\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 */\
import java.util.Arrays;\
public class Main\
\{\
	public static void main(String[] args) \{\
		int[] nums = \{-1,2\};\
	    rotate(nums, 5);\
	\}\
	\
// 	public static void rotate(int[] nums, int k) \{\
//         int[] subArr = new int[k];\
//         if( k > nums.length) \{\
//             k = (k % nums.length);\
//         \}\
//         //first take copy of k values from end\
//         for( int i = nums.length - k, j = 0; i < nums.length; i++,j++) \{\
//             subArr[j] = nums[i];\
//         \}\
        \
//         for(int i = nums.length - 1 - k; i >= 0; i--) \{\
//             nums[i+k] = nums[i];\
//         \}\
        \
//         for(int i = 0; i < k; i++) \{\
//             nums[i] = subArr[i];\
//         \}\
//         System.out.println(Arrays.toString(nums));\
//     \}\
\
    // public static void rotate(int[] nums, int k) \{\
    //     int[] subArr = new int[k];\
    //     if( k > nums.length) \{\
    //         k = (k % nums.length);\
    //     \}\
        \
    //     reverse(nums, 0, nums.length - 1);\
    //     reverse(nums, 0, k - 1);\
    //     reverse(nums, k, nums.length - 1);\
    //     System.out.println(Arrays.toString(nums));\
    // \}\
    \
    // static void reverse(int[] nums, int start, int end) \{\
    //     while( start < end) \{\
    //         int temp = nums[start];\
    //         nums[start] = nums[end];\
    //         nums[end] = temp;\
    //         start++;\
    //         end--;\
    //     \}\
    // \}\
\}\
}