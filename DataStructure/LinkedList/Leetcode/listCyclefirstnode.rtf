{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 /*\
amazone microsoft\
https://leetcode.com/problems/linked-list-cycle-ii/\
142. Linked List Cycle II\
Medium\
\
Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\
There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\
Do not modify the linked list.\
Example 1:\
\
Input: head = [3,2,0,-4], pos = 1\
Output: tail connects to node index 1\
Explanation: There is a cycle in the linked list, where tail connects to the second node.\
Example 2:\
\
Input: head = [1,2], pos = 0\
Output: tail connects to node index 0\
Explanation: There is a cycle in the linked list, where tail connects to the first node.\
Example 3:\
\
Input: head = [1], pos = -1\
Output: no cycle\
Explanation: There is no cycle in the linked list.\
*/
\f1\b0 \
public class Main\
\{\
	public static void main(String[] args) \{\
        \}\
        \
        public boolean hasCycle(ListNode head) \{\
        \
            ListNode fast = head;\
            ListNode slow = head;\
        \
            while(  fast != null && fast.next != null) \{\
                fast = fast.next.next;\
                slow = slow.next;\
                if( fast == slow) \{\
                    return true;\
                \}\
            \}\
        \
            return false;\
            \}\
        \}\
        \
        \
        //find the length of the cycle\
        public static int lengthCycle(ListNode head) \{\
        \
            ListNode fast = head;\
            ListNode slow = head;\
        \
            while(  fast != null && fast.next != null) \{\
                fast = fast.next.next;\
                slow = slow.next;\
                if( fast == slow) \{\
                    //calculate the length\
                    ListNode temp = slow;\
                    int length = 0;\
                    do \{\
                        temp = temp.next;\
                        length++;\
                    \}while(temp != fast);\
                    return length;\
                \}\
            \}\
        \
            return 0;\
            \}\
        \
        public static ListNode detectCycle(ListNode head) \{\
            int length = 0;\
            ListNode fast = head;\
            ListNode slow = head;\
        \
            while(  fast != null && fast.next != null) \{\
                fast = fast.next.next;\
                slow = slow.next;\
                if( fast == slow) \{\
                    length = lengthCycle(slow);\
                    break;\
                \}\
            \}\
            \
            if( length == 0) \{\
                return null;\
            \}\
            \
            //find the start node\
            ListNode f = head;\
            ListNode s = head;\
            \
            while(length > 0) \{\
                s = s.next;\
                length--;\
            \}\
            \
            //keep moving them forward and they will meet at cyle start\
            while( f != s) \{\
                f = f.next;\
                s = s.next;\
            \}\
            return s;\
        \}\
\}\
}