{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 /*\
bubble sort\
\
1)Basically for already sorted array you have to do only single pass of outer loop and for non sorted array do n-i-1 passes\
2)Time complexity in best case (Array is already sorted) = O(N))\
worst case (Array is sorted in opposite direction) = O(square(N))\
*/
\f1\b0 \
import java.util.Arrays;\
public class Main\
\{\
	public static void main(String[] args) \{\
		int[] arr = \{ 6,5,4,3,2,1\};\
		bubbleSort(arr);\
		System.out.println(Arrays.toString(arr));\
	\}\
	//bubble sort\
	static void bubbleSort(int[] arr) \{\
	    boolean isSwapped;\
	    \
	    for(int i = 0; i < arr.length; i++) \{\
	        isSwapped = true;\
	        for( int j = 1; j < arr.length - i; j++) \{\
	            if( arr[j] < arr[j - 1]) \{\
	                int temp = arr[j];\
	                arr[j] = arr[j - 1];\
	                arr[j - 1] = temp;\
	                isSwapped = false;\
	            \}\
	        \}\
	        \
	        if ( isSwapped) \{\
	            break;\
	        \}\
	    \}\
	\}\
\}\
}