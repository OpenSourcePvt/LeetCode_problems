{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 /*\
Search element in a purly sorted matrix of n*m\
Time Complexity = O(log N + log M)\
\
Three ways to do\
1) You can do something like approach by elemenating colums as colums and rows both are in sorted manner and looking for target element.\
Basically there we can use linear search for column or row so Time Complexity will be O(N)\
2) You can do something like you can take whole matrix into the single row array and apply binary search on it So for taking it in single array\
Complexity is O(N) and for binary search it will take O(log N)\
3)The approach I have applied as i) first apply binary search on rows and elemenating rows where target element is not laying\
                                ii) Secondly apply binary search on individual part of the each row as left side of column mid and right side of column mid\
                                So Time Complexity = O(log N + log M)\
*/
\f1\b0 \
import java.util.Arrays;\
public class Main\
\{\
	public static void main(String[] args) \{\
		int[][] matrix = \{\
        \{1,2,3,4\},\
        \{5,6,7,8\},\
        \{9,10,11,12\},\
        \{13,14,15,16\}\
      \};\
      int target = 16;\
      System.out.println(Arrays.toString(search(matrix,target)));\
	\}\
	\
	//search in the rows provided between the colums provided\
	static int[] binarySearch(int[][] matrix, int row, int cStart,int cEnd, int target)\{\
	    \
	    while ( cStart <= cEnd)\{\
	        int mid = cStart + ( cEnd - cStart) / 2;\
	        if( matrix[row][mid] == target) \{\
	            return new int[] \{row,mid\};\
	        \}\
	        \
	        if ( matrix[row][mid] > target ) \{\
	            cEnd = mid - 1;\
	        \}else if ( matrix[row][mid] < target) \{\
	            cStart = mid + 1;\
	        \}\
	    \}\
	    \
	    return new int[] \{-1,-1\};\
	\}\
	\
	static int[] search(int[][] matrix, int target)\{\
        \
        int rows = matrix.length;\
        int cols = matrix[0].length;\
        \
        if( rows == 1) \{\
            return binarySearch( matrix, 0, 0, rows,target);\
        \}\
        \
        int rStart = 0;\
        int rEnd = rows - 1;\
        int cMid = cols/2;\
        //run the loop till the 2 rows are remaining\
        while ( rStart < (rEnd - 1))\{\
            int mid = rStart + (rEnd - rStart) / 2;\
            if( matrix[mid][cMid] == target) \{\
                return new int[] \{mid, cMid\};\
            \}\
            if( matrix[mid][cMid] < target) \{\
                rStart = mid;\
            \}else \{\
                rEnd = mid;\
            \}\
        \}\
        \
        \
        // Now we have 2 rows  \
        // check whether the target is in colums of 2 rows\
        //if target element present row1 and cmid \
        if( matrix[rStart][cMid] == target)\{\
            return new int[] \{ rStart, cMid\};\
        \}\
        //if target element present at row2 and cmid\
        if( matrix[rStart + 1][cMid] == target)\{\
            return new int[] \{ rStart + 1, cMid\};\
        \}\
        //if target element is in row1 and less then cmid i.e row1 and first half\
        if( matrix[rStart][cMid] > target) \{\
            return binarySearch(matrix, rStart, 0, cMid - 1, target);\
        \}\
        //if target elememt is in row1 and greater than cmid i.e row1 and second half\
        if( matrix[rStart][cMid] < target && target <= matrix[rStart][cols - 1]) \{\
            return binarySearch(matrix, rStart, cMid + 1, cols -1, target);\
        \}\
        //if target element is in row2 and less than cmid i.e row2 and first half\
        if( matrix[rStart + 1][cMid] > target) \{\
            return binarySearch(matrix, rStart + 1, 0, cMid -1, target);\
        \}\
        //if target element is in row2 and greater than cmid i.e row2 and second half\
        else \{\
            return binarySearch(matrix, rStart + 1, cMid + 1, cols - 1, target);\
        \}\
    \}\
\}\
}