{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 /*\
Rotated Binary search using recursion\
*/
\f1\b0 \
public class Main\
\{\
	public static void main(String[] args) \{\
	    int[] arr = \{5,6,7,8,9,1,2,3\};\
	    System.out.println(rotatedBinarySearch(arr, 0, arr.length -1, 3));\
	\}\
    \
    static int rotatedBinarySearch( int[] arr, int s, int e, int target) \{\
        if ( s > e) \{\
            return -1;\
        \}\
        \
        int mid = s + ( e - s) / 2\
        if( arr[mid] == target) \{\
            return mid;\
        \}\
        \
        if( arr[s] <= arr[mid]) \{\
            if( target >= arr[s] && target < arr[mid]) \{\
                return rotatedBinarySearch(arr, s, mid - 1, target);\
            \}else \{\
                return rotatedBinarySearch(arr, mid + 1, e, target);\
            \}\
        \}\
        \
        if( target > arr[mid] && target <= arr[e]) \{\
            return rotatedBinarySearch(arr, mid + 1, e, target);\
        \}\
        \
        return rotatedBinarySearch(arr, s, mid - 1, target);\
    \}\
\}\
}