{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //Recurrent linked list\
\
public class RecurrLL \{\
\
    private Node head;\
    private Node tail;\
    \
    private int size;\
    public RecurrLL() \{\
        this.size = 0;\
    \}\
    \
    public void insertFirst(int val) \{\
        Node node = new Node(val);\
        node.next = head;\
        head = node;\
        \
        if( tail == null) \{\
            tail = head;\
        \}\
        \
        size += 1;\
    \}\
    \
    public void insertLast(int val) \{\
        if( tail == null) \{\
            insertFirst(val);\
            return;\
        \}\
        Node node = new Node(val);\
        tail.next = node;\
        tail = node;\
        size += 1;\
    \}\
    \
    public void insertAtIndex(int val, int index) \{\
        if( index == 0) \{\
            insertFirst(val);\
        \}\
        if( index == size) \{\
            insertLast(val);\
        \}\
        Node node = new Node(val);\
        Node temp = head;\
        int count = 1;\
        while ( temp != null && count != index) \{\
            temp = temp.next;\
            count += 1;\
        \}\
        node.next = temp.next;\
        temp.next = node;\
        temp = node;\
        size += 1;\
    \}\
    \
    public int deleteFirst() \{\
        int val = head.value;\
        head = head.next;\
        if( head == null) \{\
            tail = null;\
        \}\
        size -= 1;\
        return val;\
    \}\
    public int deleteLast() \{\
        int val = tail.value;\
        if( head == null) \{\
            System.out.println("List is empty");\
            return 0;\
        \}\
        if( size <= 1) \{\
            return deleteFirst();\
        \}\
        Node secondLast = get(size - 2); //size - 1 is the last one\
        tail.next = secondLast;\
        tail = secondLast;\
        tail.next = null;\
        size -= 1;\
        return val;\
    \}\
    \
    public int deleteAtIndex(int index) \{\
        if( head == null) \{\
            return 0;\
        \}\
        if( index == 0)\{\
            deleteFirst();\
        \}\
        if( index == size) \{\
            deleteLast();\
        \}\
        if( index > size)\{\
            System.out.println("array index out of bound");\
            return 0;\
        \}\
        Node previousNode = get(index - 1);\
        Node currentNode = get(index);\
        previousNode.next = currentNode.next;\
        int val = currentNode.value;\
        return val;\
    \}\
    \
    public int findIndexOfVal(int val) \{\
        Node temp = head;\
        int count = 0;\
        while ( temp.value != val) \{\
            temp = temp.next;\
            count++;\
        \}\
        return count;\
    \}\
    \
    private Node get(int index) \{\
        Node temp = head;\
        for( int i = 0; i < index; i++) \{\
            temp = temp.next;\
        \}\
        return temp;\
    \}\
    public void display() \{\
        Node temp = head;\
        while( temp != null) \{\
            System.out.print(temp.value + "->");\
            temp = temp.next;\
        \}\
        System.out.println("END");\
    \}\
    \
    public void insertRec(int val, int index) \{\
        head = insertRec(val, index, head);\
    \}\
    \
    private Node insertRec(int val, int index, Node node) \{\
        if( index == 0) \{\
            Node temp = new Node(val, node);\
            size++;\
            return temp;\
        \}\
        node.next = insertRec(val, index--, node.next);\
        return node;\
    \}\
        \
    private class Node \{\
        private int value;\
        private Node next;\
        \
        public Node(int value) \{\
        this.value = value;\
    \}\
    \
        public Node(int value, Node next) \{\
        this.value = value;\
        this.next = next;\
    \}\
    \}\
\}}