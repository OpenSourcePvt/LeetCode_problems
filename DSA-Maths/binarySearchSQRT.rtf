{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 /*\
Finding square root using binarySearch\
*/\

\f1\b0 \
import java.util.Arrays;\
public class Main\
\{\
	public static void main(String[] args) \{\
	    int n = 40;\
	    int p = 3;\
	    System.out.println(sqrt(n, p));\
	\}\
	\
	//Time Complexity: O(log(n))\
	static double sqrt(int n, int p) \{\
	    int s = 0;\
	    int e = n;\
	    double root = 0.0;\
	    \
	    while( s <= e) \{\
	        int mid = s + (e - s) / 2;\
	        \
	        if ( mid * mid == n) \{\
	            return mid;\
	        \}\
	        \
	        if( mid * mid > n) \{\
	            e = mid - 1;\
	        \} else if ( mid * mid < n) \{\
	            s = mid + 1;\
	        \}\
	    \}\
	    \
	    double incr = 0.1;\
	    for( int i = 0; i< p; i++) \{\
	        while( root * root <= n) \{\
	            root += incr;\
	        \}\
	        \
	        root -= incr;\
	        incr /= 10;\
	    \}\
	    \
	    return root;\
	\}\
\}\
}