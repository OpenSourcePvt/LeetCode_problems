{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 /*\
1304. Find N Unique Integers Sum up to Zero\
Easy\
Given an integer n, return any array containing n unique integers such that they add up to 0.\
\
 \
\
Example 1:\
\
Input: n = 5\
Output: [-7,-1,1,3,4]\
Explanation: These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4].\
Example 2:\
\
Input: n = 3\
Output: [-1,0,1]\
Example 3:\
\
Input: n = 1\
Output: [0]\
*/
\f1\b0 \
import java.util.Arrays;\
public class Main\
\{\
	public static void main(String[] args) \{\
		int target = -8;\
		int[] nums = \{-1,-2,-3,-4,-5\};\
// 		System.out.println(Arrays.toString(twoSum(nums,target)));\
        System.out.println(Arrays.toString(sumZero(6)));\
	\}\
// 	public static int[] sumZero(int n) \{\
//         int[] result = new int[n];\
        \
//         int i=0, j=n-1;\
//         while(i <= j) \{\
//             if(i == j) \{\
//                 result[i] = 0;\
//                 break;\
//             \}\
            \
//             result[i] = j*-1;\
//             result[j] = j;\
            \
//             i++;\
//             j--;\
//         \}\
        \
//         return result;\
//     \}\
    \
    //or\
    // public static int[] sumZero(int n) \{\
    //     int[] arr = new int[n];\
    //     for(int i = 1; i < n; i++) arr[0] -= arr[i] = i;\
    //     return arr;\
    // \}\
    \
    //or\
    public static int[] sumZero(int n) \{\
	int[] ans = new int[n];\
	for (int i = n % 2 == 0 ? 0 : 1; i < n; i += 2) \{\
		ans[i] = i + 1;\
		ans[i + 1] = -(i + 1);\
	\}\
	return ans;\
    \}\
\}\
}