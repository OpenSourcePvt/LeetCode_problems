{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 /*\
https://leetcode.com/problems/sort-list/\
148. Sort List\
Medium\
Given the head of a linked list, return the list after sorting it in ascending order.\
\
 \
\
Example 1:\
\
\
Input: head = [4,2,1,3]\
Output: [1,2,3,4]\
Example 2:\
\
\
Input: head = [-1,5,3,4,0]\
Output: [-1,0,3,4,5]\
Example 3:\
\
Input: head = []\
Output: []\
*/
\f1\b0 \
public class Main\
\{\
	public static void main(String[] args) \{\
	\}\
	\
	public ListNode sortList(ListNode head) \{\
        if( head == null || head.next == null) \{\
            return head;\
        \}\
        \
        ListNode mid = getMid(head);\
        ListNode left = sortList(head);\
        ListNode right = sortList(mid);\
        \
        return mergeTwoLists(left,right);\
    \}\
    \
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) \{\
        \
        ListNode dummyHead = new ListNode();\
        ListNode tail = dummyHead;\
        \
        while( list1 != null & list2 != null) \{\
            if( list1.val < list2.val) \{\
                tail.next = list1;\
                list1 = list1.next;\
            \}else \{\
                tail.next = list2;\
                list2 = list2.next;\
            \}\
            tail = tail.next;\
        \} \
    tail.next = ( list1 != null) ? list1 : list2;\
    return dummyHead.next;\
    \}\
    \
     ListNode getMid(ListNode head) \{\
        ListNode midPrev = null;\
        \
        while( head != null && head.next != null) \{\
           midPrev = (midPrev == null) ? head : midPrev.next;\
           head = head.next.next;\
        \}\
        ListNode mid = midPrev.next;\
        midPrev.next = null;\
        return mid;\
    \}\
\}\
\
class ListNode \{\
    int val;\
    ListNode next;\
    \
    public ListNode() \{\
        \
    \}\
    \
    public ListNode(int val) \{\
        this.val = val;\
        this.next = null;\
    \}\
\}\
}