{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww30380\viewh16840\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 /*\
Backtracking Introduction + Maze Problems - Theory + Code + Tips\
*/
\f1\b0 \
import java.util.ArrayList;\
import java.util.List;\
public class Main\
\{\
	public static void main(String[] args) \{\
	   // System.out.println(count(3, 3));\
	   //path("", 3, 3);\
	   //System.out.println(pathArray("", 4, 4));\
	   //System.out.println(countPath(2,2));\
	   //diagonalPath("",3,3);\
	   //System.out.println(diagonalPathArray("",4,4));\
	   \
	   boolean[][] mazeBoard = \{\
	       \{true, true, true\},\
	       \{true, false, true\},\
	       \{true, true, true\}\
	   \};\
	   //mazeObstacles("", mazeBoard, 0, 0);\
	   //mazeObstaclesDiagonal("", mazeBoard, 0, 0);\
	   //System.out.println(mazeObstaclesCount(mazeBoard, 0, 0));\
	   System.out.println(mazeObstaclesDiagonalArray("", mazeBoard, 0, 0));\
	\}\
	\
	static int count(int r, int c) \{\
	    \
	    if( r == 1 || c == 1) \{\
	        return 1;\
	    \}\
	    \
	    int left = count(r - 1, c);\
	    int right = count(r, c - 1);\
	    return left + right;\
	\}\
	\
	//print all the paths\
	static void path(String processed, int r, int c) \{\
	    \
	    if( r == 1 && c == 1) \{\
	        System.out.println(processed);\
	        return;\
	    \}\
	    \
	    if ( r > 1) \{\
	        path( processed + 'D', r - 1, c);\
	    \}\
	    \
	    if ( c > 1) \{\
	        path( processed + 'R', r, c - 1);\
	    \}\
	\}\
	\
	//return array list of paths\
	static List<String> pathArray(String processed, int r, int c) \{\
	    if( r == 1 && c == 1) \{\
	        ArrayList<String> list = new ArrayList<>();\
	        list.add(processed);\
	        return list;\
	    \}\
	    ArrayList<String> ans = new ArrayList<>();\
	    if( r > 1) \{\
	        ans.addAll(pathArray(processed + 'D', r -1, c));\
	    \}\
	    \
	    if ( c > 1) \{\
	        ans.addAll(pathArray(processed + 'R', r, c - 1));\
	    \}\
	    return ans;\
	\}\
	\
	//Trce the path right down and diagonal only\
	static int countPath(int r, int c) \{\
	    if( r == 1 || c == 1) \{\
	        return 1;\
	    \}\
	    \
	    int left = countPath( r - 1, c);\
	    int right = countPath( r, c - 1);\
	    int diagonal = countPath(r -1, c - 1);\
	    return left + right + diagonal;\
	\}\
	\
	static void diagonalPath( String processed, int r, int c) \{\
	    if( r == 1 && c == 1) \{\
	        System.out.println(processed);\
	        return;\
	    \}\
	    \
	    if( r > 1 && c > 1) \{\
	        diagonalPath(processed + 'D', r - 1, c - 1);\
	    \}\
	    \
	    if( r > 1) \{\
	        diagonalPath(processed + 'V', r - 1, c);\
	    \}\
	    \
	    if( c > 1) \{\
	        diagonalPath(processed + 'H', r, c - 1);\
	    \}\
	\}\
	\
	static List<String> diagonalPathArray( String processed, int r, int c) \{\
	    if( r == 1 && c == 1) \{\
	        ArrayList<String> list = new ArrayList<>();\
	        list.add(processed);\
	        return list;\
	    \}\
	    ArrayList<String> ans = new ArrayList<>();\
	    if( r > 1 && c > 1) \{\
	        ans.addAll(diagonalPathArray(processed + 'D', r - 1, c - 1));\
	    \}\
	    \
	    if( r > 1) \{\
	        ans.addAll(diagonalPathArray(processed + 'V', r - 1, c));\
	    \}\
	    \
	    if( c > 1) \{\
	        ans.addAll(diagonalPathArray(processed + 'H', r, c - 1));\
	    \}\
	    \
	    return ans;\
	\}\
	\
	//maze with obstacles\
	static void mazeObstacles( String processed, boolean[][] mazeBoard, int r, int c) \{\
	    if( r == mazeBoard.length - 1 && c == mazeBoard[0].length - 1) \{\
	        System.out.println(processed);\
	        return;\
	    \}\
	    \
	    if( !mazeBoard[r][c]) \{\
	        return;\
	    \}\
	    \
	   // if( r > 1 && c > 1) \{\
	   //     diagonalPath(processed + 'D', r - 1, c - 1);\
	   // \}\
	    \
	    if( r < mazeBoard.length - 1) \{\
	        mazeObstacles(processed + 'D', mazeBoard, r + 1, c);\
	    \}\
	    \
	    if( c < mazeBoard[0].length - 1) \{\
	        mazeObstacles(processed + 'R', mazeBoard, r, c + 1);\
	    \}\
	\}\
	\
	//maze with obstacles and allowing horizontal verticle and diagonal\
	static void mazeObstaclesDiagonal( String processed, boolean[][] mazeBoard, int r, int c) \{\
	    if( r == mazeBoard.length - 1 && c == mazeBoard[0].length - 1) \{\
	        System.out.println(processed);\
	        return;\
	    \}\
	    \
	    if( !mazeBoard[r][c]) \{\
	        return;\
	    \}\
	    \
	    if( r < mazeBoard.length - 1 && c < mazeBoard[0].length - 1) \{\
	        mazeObstaclesDiagonal(processed + 'D', mazeBoard, r + 1, c + 1);\
	    \}\
	    \
	    if( r < mazeBoard.length - 1) \{\
	        mazeObstaclesDiagonal(processed + 'V', mazeBoard, r + 1, c);\
	    \}\
	    \
	    if( c < mazeBoard[0].length - 1) \{\
	        mazeObstaclesDiagonal(processed + 'H', mazeBoard, r, c + 1);\
	    \}\
	\}\
	\
	static int mazeObstaclesCount( boolean[][] mazeBoard, int r, int c) \{\
	    if( r == mazeBoard.length - 1 || c == mazeBoard[0].length - 1) \{\
	        return 1;\
	    \}\
	    \
	    if( !mazeBoard[r][c]) \{\
	        return 0;\
	    \}\
	   \
	    int diagonal = mazeObstaclesCount(mazeBoard, r + 1, c + 1);\
	   \
	    int horizontal = mazeObstaclesCount(mazeBoard, r + 1, c);\
	   \
	    int verticle = mazeObstaclesCount(mazeBoard, r, c + 1);\
	    \
	    return diagonal + horizontal + verticle;\
	\}\
	\
	static List<String> mazeObstaclesDiagonalArray( String processed, boolean[][] mazeBoard, int r, int c) \{\
	    if( r == mazeBoard.length - 1 && c == mazeBoard[0].length - 1) \{\
	        ArrayList<String> list = new ArrayList<>();\
	        list.add(processed);\
	        return list;\
	    \}\
	    \
	    ArrayList<String> ans = new ArrayList<>();\
	    if( !mazeBoard[r][c]) \{\
	        return ans;\
	    \}\
	    \
	    if( r < mazeBoard.length - 1 && c < mazeBoard[0].length - 1) \{\
	        ans.addAll(mazeObstaclesDiagonalArray(processed + 'D', mazeBoard, r + 1, c + 1));\
	    \}\
	    \
	    if( r < mazeBoard.length - 1) \{\
	        ans.addAll(mazeObstaclesDiagonalArray(processed + 'V', mazeBoard, r + 1, c));\
	    \}\
	    \
	    if( c < mazeBoard[0].length - 1) \{\
	        ans.addAll(mazeObstaclesDiagonalArray(processed + 'H', mazeBoard, r, c + 1));\
	    \}\
	    return ans;\
	\}\
\}\
}