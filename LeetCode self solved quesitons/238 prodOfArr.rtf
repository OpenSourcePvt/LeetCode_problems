{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 /*\
238. Product of Array Except Self\
Medium\
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\
\
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\
\
You must write an algorithm that runs in O(n) time and without using the division operation.\
\
Example 1:\
\
Input: nums = [1,2,3,4]\
Output: [24,12,8,6]\
Example 2:\
\
Input: nums = [-1,1,0,-3,3]\
Output: [0,0,9,0,0]\
\
Constraints:\
\
2 <= nums.length <= 105\
-30 <= nums[i] <= 30\
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\
\
Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)\
*/
\f1\b0 \
import java.util.Arrays;\
public class Main\
\{\
	public static void main(String[] args) \{\
	    int[] nums = \{1,2,3,4\};\
	    System.out.println(Arrays.toString(productExceptSelf(nums)));\
	\}\
	\
	public static int[] productExceptSelf(int[] nums) \{\
	    int leftProduct = 1;\
	    int[] rightProduct = new int[nums.length];\
	    int[] res = new int[nums.length];\
	    rightProduct[nums.length - 1] = nums[nums.length - 1];\
        for (int i = nums.length - 2; i >= 0; i--) \{\
            rightProduct[i] = rightProduct[i + 1] * nums[i];\
        \}\
        res[0] = rightProduct[1];\
        for(int i = 1; i < nums.length - 1; i++) \{\
            leftProduct = nums[i - 1] * leftProduct;\
            res[i] = leftProduct * rightProduct[i + 1];\
        \}\
        leftProduct = nums[nums.length - 2] * leftProduct;\
        res[nums.length - 1] = leftProduct;\
        return res;\
    \}\
\}\
}