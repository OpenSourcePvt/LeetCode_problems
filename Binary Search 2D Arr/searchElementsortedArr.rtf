{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 /*\
Search the element in matrix which is sorted in row wise and column wise manner\
*/
\f1\b0 \
import java.util.Arrays;\
public class Main\
\{\
	public static void main(String[] args) \{\
		int[][] matrix = \{\
        \{10,20,30,40\},\
        \{15,25,35,45\},\
        \{28,29,37,49\},\
        \{33,34,38,50\}\
      \};\
      int target = 37;\
      System.out.println(Arrays.toString(search(matrix,target)));\
	\}\
	\
	static int[] search(int[][] matrix, int target)\{\
        \
        int r = 0;\
        int c = matrix.length-1;\
        \
        while( r < matrix.length && c >= 0) \{\
            \
            //if target found\
            if( matrix[r][c] == target) \{\
                return new int[]\{r,c\};\
            \}\
            \
            //if target is less than element\
            if ( target > matrix[r][c]) \{\
                r++;\
            \}else \{\
                c--;\
            \}\
        \}\
        return new int[]\{-1,-1\};\
    \}\
\}\
}